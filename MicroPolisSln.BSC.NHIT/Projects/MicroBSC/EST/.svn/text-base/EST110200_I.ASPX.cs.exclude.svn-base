using System;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Data.SqlClient;
using System.Drawing;
using System.IO;

using MicroBSC.Estimation.Biz;

public partial class EST_EST110200_I : EstPageBase
{
    #region ================ 필드 =======================

    public string EST_ID;
    public string EST_TGT_TYPE;
    public string YEAR_YN;
    public string MERGE_YN;
    public string DEPT_COLUMN_NO_USE_YN;
    public string ESTTERM_SUB_ALL_USE_YN;
    public string ESTTERM_STEP_ALL_USE_YN;
    private string DEPT_VALUES;

    #endregion

    #region ================ 프로퍼티 =======================

    private string GraphType
    {
        get
        {
            return (ViewState["GraphType"] == null) ? "LowHigh" : (string)ViewState["GraphType"]; 
        }
        set 
        {
            ViewState["GraphType"] = value;
        }
    }

    private BiasType DataType
    {
        get
        {
            return (ViewState["DataType"] == null) ? BiasType.ORG : (BiasType)ViewState["DataType"];
        }
        set
        {
            ViewState["DataType"] = value;
        }
    }

    #endregion

    #region ================ Page 이벤트 =======================

    protected void Page_Init(object sender, EventArgs e)
    {
        SetPageLayout(phdLayout, phdBottom);
    }

    protected void Page_Load(object sender, EventArgs e)
    {
        EST_JOB_IDS             = WebUtility.GetRequest("EST_JOB_IDS");
        EST_TGT_TYPE            = WebUtility.GetRequest("EST_TGT_TYPE", "EST");
        YEAR_YN                 = WebUtility.GetRequest("YEAR_YN", "N");
        MERGE_YN                = WebUtility.GetRequest("MERGE_YN", "N");
        DEPT_COLUMN_NO_USE_YN   = WebUtility.GetRequest("DEPT_COLUMN_NO_USE_YN", "N");
        ESTTERM_SUB_ALL_USE_YN  = WebUtility.GetRequest("ESTTERM_SUB_ALL_USE_YN", "N");
        ESTTERM_STEP_ALL_USE_YN = WebUtility.GetRequest("ESTTERM_STEP_ALL_USE_YN", "N");
        EST_JOB_ID              = "JOB_04";
        EST_JOB_IDS             = "JOB_04";

        BizUtility.SetButtonVisibleCommandNameByRolID(EMP_REF_ID, ibnApplyBiasPoint);
        BizUtility.SetButtonVisibleCommandNameByRolID(EMP_REF_ID, ibnCalcBiasPoint);

        if (!Page.IsPostBack)
        {
            DropDownListCommom.BindComp(ddlCompID, lblCompTitle);
            DropDownListCommom.BindEstTerm(ddlEstTermRefID);
            DropDownListCommom.BindDefaultValue(ddlEstTermSubID, "----------", "");
            DropDownListCommom.BindDefaultValue(ddlEstTermStepID, "----------", "");
            DropDownListCommom.BindBiasType(ddlBiasTypeID);

            if(COMP_ID == 0) 
                COMP_ID = WebUtility.GetIntByValueDropDownList(ddlCompID);

            if(ESTTERM_REF_ID == 0)
                ESTTERM_REF_ID = WebUtility.GetIntByValueDropDownList(ddlEstTermRefID);

            if(ESTTERM_SUB_ID == 0)
                ESTTERM_SUB_ID = WebUtility.GetIntByValueDropDownList(ddlEstTermSubID);

            if(ESTTERM_STEP_ID == 0)
                ESTTERM_STEP_ID = WebUtility.GetIntByValueDropDownList(ddlEstTermStepID);

            ibnSearch.Attributes.Add("onclick", "return Search();");
            ibnApplyBiasPoint.Attributes.Add("onclick", "return confirm('정말 선택된 조정방식으로 점수를 Bias 조정 하시겠습니까?');");
            ibnCalcBiasPoint.Attributes.Add("onclick", "return confirm('Bias 조정점수를 계산 실행하시겠습니까?');");

            if(!WebUtility.GetRequest("EST_ID").Equals(""))
            {
                txtSearchEstName.Visible    = false;
                imgEstButton.Visible        = false;
                ibnSearch.Visible           = false;

                hdfSearchEstID.Value        = WebUtility.GetRequest("EST_ID");
                EST_ID                      = hdfSearchEstID.Value;

                BindingData(  COMP_ID
                            , EST_ID
                            , ESTTERM_REF_ID
                            , ESTTERM_SUB_ID
                            , ESTTERM_STEP_ID
                            , GraphType
                            , DataType);
            }
        }

        COMP_ID         = WebUtility.GetIntByValueDropDownList(ddlCompID);
        EST_ID          = hdfSearchEstID.Value;
        ESTTERM_REF_ID  = WebUtility.GetIntByValueDropDownList(ddlEstTermRefID);

        if(YEAR_YN.Equals("Y")) 
        {
            ESTTERM_SUB_ID = BizUtility.GetEstTermSubIDByYearYN(COMP_ID);
        }
        else
        {
            ESTTERM_SUB_ID = WebUtility.GetIntByValueDropDownList(ddlEstTermSubID);
        }

        if(MERGE_YN.Equals("Y")) 
        {
            ESTTERM_STEP_ID = BizUtility.GetEstTermStepIDByMergeYN(COMP_ID);
        }
        else
        {
            if(ESTTERM_STEP_ALL_USE_YN.Equals("Y")) 
            {
                ESTTERM_STEP_ID = 0;
            }
            else
            {
                ESTTERM_STEP_ID = WebUtility.GetIntByValueDropDownList(ddlEstTermStepID);
            }
        }

        DEPT_VALUES = hdfEstDept.Value;

        ltrScript.Text = "";
    }

    protected void Page_PreRender(object sender, EventArgs e)
    {
        if(YEAR_YN.Equals("Y"))
            ddlEstTermSubID.Visible = false;

        if(MERGE_YN.Equals("Y"))
            ddlEstTermStepID.Visible = false;
    }

    #endregion

    #region ================ 메소드 =======================

    private void BindInfraChart(  int comp_id
                                , string est_id
                                , int estterm_ref_id
                                , int estterm_sub_id
                                , int estterm_step_id
                                , string graphType
                                , BiasType biasType
                                , string dept_values) 
    {
        if(tdBiasDept.Visible && hdfEstDept.Value.Trim().Equals("")) 
        {
            ltrScript.Text = JSHelper.GetAlertScript("Bias 조정을 위한 부서 범위를 선택하세요.");
            return;
        }

        Biz_Datas data  = new Biz_Datas();
        DataTable dt    = data.GetBiasQueryData(  comp_id
                                                , est_id
                                                , estterm_ref_id
                                                , estterm_sub_id
                                                , estterm_step_id
                                                , biasType.ToString()
                                                , dept_values);

        DataTable dtMod = new DataTable();
        DataRow drMod = null;

        dtMod.Columns.Add("TYPE", typeof(string));

        string[] c_name = new string[dt.Rows.Count];

        for(int i = 0; i < dt.Rows.Count; i++) 
        {
            DataRow dr = dt.Rows[i];

            dtMod.Columns.Add(string.Format("C_{0}", dr["EST_EMP_ID"]), typeof(double));

            c_name[i] = string.Format("{0}({1}평가)", dr["EST_EMP_NAME"], dr["PNT_CNT"]);
            c_name[i] = string.Format("{0}", dr["EST_EMP_NAME"]);
        }

        DataTable dtType = new DataTable();
        dtType.Columns.Add("COLUMN", typeof(string));
        dtType.Columns.Add("TEXT", typeof(string));
        dtType.Rows.Add("PNT_MAX", "최대범위");
        dtType.Rows.Add("PNT_AVG", "평균");
        dtType.Rows.Add("PNT_MIN", "최소범위");

        foreach(DataRow drType in dtType.Rows) 
        {
            drMod = dtMod.NewRow();

            drMod["TYPE"] = drType["TEXT"];

            foreach(DataColumn col in dtMod.Columns) 
            {
                if(col.ColumnName.Equals("TYPE"))
                    continue;

                string columnName = drType["COLUMN"].ToString();

                DataRow[] drCol = dt.Select(string.Format("EST_EMP_ID = {0}", col.ColumnName.Replace("C_", "")));

                if(drCol.Length > 0) 
                {
                    drMod[col.ColumnName] = drCol[0][drType["COLUMN"].ToString()];
                }
                else 
                {
                    drMod[col.ColumnName] = 0;
                }
            }

            dtMod.Rows.Add(drMod);
        }


        DataTable dtA = new DataTable();
        DataRow drA = null;
        dtA.Columns.Add("TYPE", typeof(string));
        dtA.Columns.Add("C_1", typeof(double));
        dtA.Columns.Add("C_2", typeof(double));
        dtA.Columns.Add("C_3", typeof(double));

        drA = dtA.NewRow();

        drA["TYPE"] = "최대";
        drA["C_1"] = 20.5;
        drA["C_2"] = 30.5;
        drA["C_3"] = 35.5;

        dtA.Rows.Add(drA);

        drA = dtA.NewRow();

        drA["TYPE"] = "최소";
        drA["C_1"] = 25;
        drA["C_2"] = 30;
        drA["C_3"] = 25;

        dtA.Rows.Add(drA);

        if (biasType == BiasType.ORG)
            UltraChart1.TitleTop.Text = "원시 점수";
        else if (biasType == BiasType.AVG)
            UltraChart1.TitleTop.Text = "평균조정 점수";
        else if (biasType == BiasType.STD)
            UltraChart1.TitleTop.Text = "평균편차조정 점수";

        if(graphType.Equals("Radar")) 
        {
            UltraChart1.ChartType = Infragistics.UltraChart.Shared.Styles.ChartType.RadarChart;
        }
        else if(graphType.Equals("LowHigh")) 
        {
            UltraChart1.ChartType = Infragistics.UltraChart.Shared.Styles.ChartType.SplineChart;
            UltraChart1.Axis.X.Labels.Orientation = Infragistics.UltraChart.Shared.Styles.TextOrientation.Horizontal;
            UltraChart1.Axis.X.Labels.HorizontalAlign = StringAlignment.Center;
            UltraChart1.Axis.X.Labels.VerticalAlign = StringAlignment.Near;
            UltraChart1.Axis.Y2.Visible = true;
        }
        
        UltraChart1.Data.SetColumnLabels(c_name);
        UltraChart1.Data.DataSource= dtMod;
        UltraChart1.Data.DataBind();
    }

    private void BindingData( int comp_id
                            , string est_id
                            , int estterm_ref_id
                            , int estterm_sub_id
                            , int estterm_step_id
                            , string graphType
                            , BiasType dataType) 
    {
        Biz_EstInfos estInfo = new Biz_EstInfos(comp_id, est_id);

        if(!estInfo.IsExists(comp_id, est_id)) 
        {
            ltrScript.Text = JSHelper.GetAlertScript("선택된 회사의 평가정보가 없습니다.");
            return;
        }

        DropDownListCommom.BindEstTermSub(ddlEstTermSubID, comp_id, est_id, "");
        DropDownListCommom.BindEstTermStep(ddlEstTermStepID, comp_id, est_id);

        // 처음 실행될때
        if(estterm_sub_id.Equals(0))
            ESTTERM_SUB_ID = WebUtility.GetIntByValueDropDownList(ddlEstTermSubID);

        // 만약 주기가 년간일 경우
        if(YEAR_YN.Equals("Y")) 
        {
            ESTTERM_SUB_ID = BizUtility.GetEstTermSubIDByYearYN(COMP_ID);
        }

        // 만약 차수가 합산일 경우
        if(MERGE_YN.Equals("Y")) 
        {
            ESTTERM_STEP_ID = BizUtility.GetEstTermStepIDByMergeYN(COMP_ID);
        }
        else 
        {
            // 만약 모든 차수를 보여 줘야하는 경우
            if(ESTTERM_STEP_ALL_USE_YN.Equals("Y")) 
            {
                ESTTERM_STEP_ID             = 0;
                ddlEstTermStepID.Visible    = false;
            }
        }

        WebUtility.FindByValueDropDownList(ddlEstTermRefID, estterm_ref_id);
        
        if(ddlEstTermSubID.Visible) 
            WebUtility.FindByValueDropDownList(ddlEstTermSubID, estterm_sub_id);

        if(ddlEstTermStepID.Visible) 
            WebUtility.FindByValueDropDownList(ddlEstTermStepID, estterm_step_id);

        if(estInfo.Owner_Type.Equals("D")) 
                OwnerTypeMode   = OwnerType.Dept;
            else 
                OwnerTypeMode   = OwnerType.Emp_User;

        ScaleTypeMode   = estInfo.Scale_Type;
        WeightTypeMode  = estInfo.Weight_Type;

        if(estInfo.Bias_YN.Equals("Y"))
            BiasYN          = YesNo.Yes;
        else
            BiasYN          = YesNo.No;

        if(estInfo.Grade_Confirm_YN.Equals("Y"))
            GradeConfirmYN = YesNo.Yes;
        else
            GradeConfirmYN = YesNo.No;

        Biz_Datas est_data   = new Biz_Datas();

        int est_emp_id      = 0;;
        int tgt_dept_id     = 0;
        int tgt_emp_id      = 0;

        if(OwnerTypeMode == OwnerType.Dept) 
        {
            if(EST_TGT_TYPE.Equals("EST"))
            {
                est_emp_id  = EMP_REF_ID;
                tgt_dept_id = 0;
                tgt_emp_id  = 0;
            }
            else if(EST_TGT_TYPE.Equals("TGT"))
            {
                est_emp_id  = 0;
                tgt_dept_id = BizUtility.GetDeptID(EMP_REF_ID);
                tgt_emp_id  = -1;
            }
        }
        else if(OwnerTypeMode == OwnerType.Emp_User) 
        {
            if(EST_TGT_TYPE.Equals("EST"))
            {
                est_emp_id  = EMP_REF_ID;
                tgt_dept_id = 0;
                tgt_emp_id  = 0;
            }
            else if(EST_TGT_TYPE.Equals("TGT"))
            {
                est_emp_id  = 0;
                tgt_dept_id = 0;
                tgt_emp_id  = EMP_REF_ID;
            }
        }

        if(OwnerTypeMode == OwnerType.Dept && COL_DEPT_TO_EMP_DATA.Equals("Y")) 
        {
            OwnerTypeMode = OwnerType.Emp_User;
        }
        else if(OwnerTypeMode == OwnerType.Emp_User && COL_DEPT_TO_EMP_DATA.Equals("Y")) 
        {
            OwnerTypeMode = OwnerType.Dept;
        }

        if(estInfo.Bias_Dept_Use_YN.Equals("Y")) 
        {
            tdBiasDept.Visible = true;
        }
        else 
        {
            tdBiasDept.Visible  = false;
            hdfEstDept.Value    = "";
        }

        BindInfraChart(   COMP_ID
                        , EST_ID
                        , ESTTERM_REF_ID
                        , ESTTERM_SUB_ID
                        , ESTTERM_STEP_ID
                        , GraphType
                        , DataType
                        , DEPT_VALUES);
    }

    #endregion

    #region ======================= 드롭다운 컨트롤 ===========================

    protected void ddlCompID_SelectedIndexChanged(object sender, EventArgs e)
    {
        BindingData(COMP_ID
                , EST_ID
                , ESTTERM_REF_ID
                , ESTTERM_SUB_ID
                , ESTTERM_STEP_ID
                , GraphType
                , DataType);
    }

    protected void ddlEstTermRefID_SelectedIndexChanged(object sender, EventArgs e)
    {
        ESTTERM_REF_ID = WebUtility.GetIntByValueDropDownList(ddlEstTermRefID);

        BindInfraChart(COMP_ID
                    , EST_ID
                    , ESTTERM_REF_ID
                    , ESTTERM_SUB_ID
                    , ESTTERM_STEP_ID
                    , GraphType
                    , DataType
                    , DEPT_VALUES);
    }

    protected void ddlEstTermSubID_SelectedIndexChanged(object sender, EventArgs e)
    {
        ESTTERM_SUB_ID = WebUtility.GetIntByValueDropDownList(ddlEstTermSubID);

        BindInfraChart(COMP_ID
                    , EST_ID
                    , ESTTERM_REF_ID
                    , ESTTERM_SUB_ID
                    , ESTTERM_STEP_ID
                    , GraphType
                    , DataType
                    , DEPT_VALUES);
    }

    protected void ddlEstTermStepID_SelectedIndexChanged(object sender, EventArgs e)
    {
        ESTTERM_STEP_ID = WebUtility.GetIntByValueDropDownList(ddlEstTermStepID);

        BindInfraChart(COMP_ID
                    , EST_ID
                    , ESTTERM_REF_ID
                    , ESTTERM_SUB_ID
                    , ESTTERM_STEP_ID
                    , GraphType
                    , DataType
                    , DEPT_VALUES);
    }

    #endregion

    #region ================== 버튼 컨틀롤 ========================

    protected void ibnRadar_Click(object sender, ImageClickEventArgs e)
    {
        GraphType = "Radar";

        BindInfraChart(COMP_ID
                    , EST_ID
                    , ESTTERM_REF_ID
                    , ESTTERM_SUB_ID
                    , ESTTERM_STEP_ID
                    , GraphType
                    , DataType
                    , DEPT_VALUES);
    }

    protected void ibnLowHigh_Click(object sender, ImageClickEventArgs e)
    {
        GraphType = "LowHigh";

        BindInfraChart(COMP_ID
                    , EST_ID
                    , ESTTERM_REF_ID
                    , ESTTERM_SUB_ID
                    , ESTTERM_STEP_ID
                    , GraphType
                    , DataType
                    , DEPT_VALUES);
    }

    protected void ibnCalcBiasPoint_Click(object sender, ImageClickEventArgs e)
    {
        if(BiasYN == YesNo.Yes) 
        {
            if(tdBiasDept.Visible && hdfEstDept.Value.Trim().Equals("")) 
            {
                ltrScript.Text = JSHelper.GetAlertScript("Bias 조정을 위한 부서 범위를 선택하세요.");
                return;
            }

            Biz_BiasDatas biasData  = new Biz_BiasDatas();
            bool isOK               = false;

            isOK                    = biasData.SetBiasAvg(COMP_ID
                                                        , EST_ID
                                                        , ESTTERM_REF_ID
                                                        , ESTTERM_SUB_ID
                                                        , ESTTERM_STEP_ID
                                                        , YEAR_YN
                                                        , MERGE_YN
                                                        , OwnerTypeMode
                                                        , DEPT_VALUES
                                                        , DateTime.Now
                                                        , EMP_REF_ID);

            isOK                    = biasData.SetBiasSTDev(  COMP_ID
                                                            , EST_ID
                                                            , ESTTERM_REF_ID
                                                            , ESTTERM_SUB_ID
                                                            , ESTTERM_STEP_ID
                                                            , YEAR_YN
                                                            , MERGE_YN
                                                            , OwnerTypeMode
                                                            , DEPT_VALUES
                                                            , DateTime.Now
                                                            , EMP_REF_ID);

            ltrScript.Text = JSHelper.GetAlertScript("정상적으로 Bias 조정점수를 계산하여 적용하였습니다.");

            BindInfraChart(COMP_ID
                        , EST_ID
                        , ESTTERM_REF_ID
                        , ESTTERM_SUB_ID
                        , ESTTERM_STEP_ID
                        , GraphType
                        , DataType
                        , DEPT_VALUES);
        }
    }

    protected void ibnOrg_Click(object sender, ImageClickEventArgs e)
    {
        DataType = BiasType.ORG;

        BindInfraChart(COMP_ID
                    , EST_ID
                    , ESTTERM_REF_ID
                    , ESTTERM_SUB_ID
                    , ESTTERM_STEP_ID
                    , GraphType
                    , DataType
                    , DEPT_VALUES);
    }

    protected void ibnAvg_Click(object sender, ImageClickEventArgs e)
    {
        DataType = BiasType.AVG;

        BindInfraChart(COMP_ID
                    , EST_ID
                    , ESTTERM_REF_ID
                    , ESTTERM_SUB_ID
                    , ESTTERM_STEP_ID
                    , GraphType
                    , DataType
                    , DEPT_VALUES);
    }

    protected void ibnStd_Click(object sender, ImageClickEventArgs e)
    {
        DataType = BiasType.STD;

        BindInfraChart(COMP_ID
                    , EST_ID
                    , ESTTERM_REF_ID
                    , ESTTERM_SUB_ID
                    , ESTTERM_STEP_ID
                    , GraphType
                    , DataType
                    , DEPT_VALUES);
    }

    protected void lbnReload_Click(object sender, EventArgs e)
    {
        BindInfraChart(COMP_ID
                    , EST_ID
                    , ESTTERM_REF_ID
                    , ESTTERM_SUB_ID
                    , ESTTERM_STEP_ID
                    , GraphType
                    , DataType
                    , DEPT_VALUES);
    }

    protected void ibnSearch_Click(object sender, ImageClickEventArgs e)
    {
        BindingData(COMP_ID
                , EST_ID
                , ESTTERM_REF_ID
                , ESTTERM_SUB_ID
                , ESTTERM_STEP_ID
                , GraphType
                , DataType);

        BizUtility.SetButtonVisibleCommandNameByRolID(EMP_REF_ID, tdImgBox.Controls);
        BizUtility.SetButtonVisibleByEstJobID(EST_JOB_IDS
                                            , tdImgBox.Controls
                                            , COMP_ID
                                            , EST_ID
                                            , ESTTERM_REF_ID
                                            , ESTTERM_SUB_ID
                                            , ESTTERM_STEP_ID);
    }

    protected void ibnConfirmBias_Click(object sender, ImageClickEventArgs e)
    {
        if(tdBiasDept.Visible && hdfEstDept.Value.Trim().Equals("")) 
        {
            ltrScript.Text = JSHelper.GetAlertScript("Bias 조정을 위한 부서 범위를 선택하세요.");
            return;
        }
        
        Biz_BiasDatas biasData  = new Biz_BiasDatas();
        bool isOK               = false;

        isOK                    = biasData.SetBiasType(COMP_ID
                                                    , EST_ID
                                                    , ESTTERM_REF_ID
                                                    , ESTTERM_SUB_ID
                                                    , 0
                                                    , WebUtility.GetByValueDropDownList(ddlBiasTypeID)
                                                    , DEPT_VALUES
                                                    , DateTime.Now
                                                    , EMP_REF_ID);

        if(isOK) 
        {
            ltrScript.Text = JSHelper.GetAlertScript(string.Format("{0}로 점수를 조정 확정 하였습니다.", WebUtility.GetByTextDropDownList(ddlBiasTypeID)));
        }
        else 
        {
            ltrScript.Text = JSHelper.GetAlertScript(string.Format("{0}로 점수를 조정 처리 중 오류가 발생하였습니다.", WebUtility.GetByTextDropDownList(ddlBiasTypeID)));
        }

        BindInfraChart(COMP_ID
                    , EST_ID
                    , ESTTERM_REF_ID
                    , ESTTERM_SUB_ID
                    , ESTTERM_STEP_ID
                    , GraphType
                    , DataType
                    , DEPT_VALUES);
    }

    protected void ibnConfirmCancel_Click(object sender, ImageClickEventArgs e)
    {
        bool isJobOK = EstJobUtility.SetConfirmButtonVisible( COMP_ID
                                                            , EST_ID
                                                            , ESTTERM_REF_ID
                                                            , ESTTERM_SUB_ID
                                                            , ESTTERM_STEP_ID
                                                            , EST_JOB_ID
                                                            , ibnApplyBiasPoint
                                                            , ibnConfirmCancel
                                                            , "N"
                                                            , DateTime.Now
                                                            , EMP_REF_ID
                                                            , ltrScript);

        ltrScript.Text = JSHelper.GetAlertScript("정상적으로 확정을 취소하였습니다.");
    }

    #endregion
}
